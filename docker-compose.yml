services:
  backend:
    restart: always
    build: ./backend
    volumes:
      - logs_volume:/backend/transactionManager/logs
      - media_volume:/backend/transactionManager/media
      - static_volume:/backend/transactionManager/static
    environment:
      DEBUG: ${DEBUG?Variable not set}
      SECRET_KEY: ${SECRET_KEY?Variable not set}
      ALLOWED_HOSTS: ${ALLOWED_HOSTS?Variable not set}
      POSTGRES_DB: ${POSTGRES_DB?Variable not set}
      POSTGRES_USER: ${POSTGRES_USER?Variable not set}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD?Variable not set}
      POSTGRES_HOST: ${POSTGRES_HOST?Variable not set}
      POSTGRES_PORT: ${POSTGRES_PORT?Variable not set}
      CELERY_BROKER_URL: ${BROKER?Variable not set}
      CELERY_RESULT_BACKEND: ${RESULT_BACKEND?Variable not set}
    depends_on:
      db:
        condition: service_healthy
      celery:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://127.0.0.1:8000/utils/health-check"]
      interval: 10s
      timeout: 5s
      retries: 5


  celery:
    restart: always
    build: ./backend
    command: python -m celery -A transactionManager worker
    volumes:
      - logs_volume:/backend/transactionManager/logs
      - media_volume:/backend/transactionManager/media
    environment:
      DEBUG: ${DEBUG?Variable not set}
      SECRET_KEY: ${SECRET_KEY?Variable not set}
      ALLOWED_HOSTS: ${ALLOWED_HOSTS?Variable not set}
      POSTGRES_DB: ${POSTGRES_DB?Variable not set}
      POSTGRES_USER: ${POSTGRES_USER?Variable not set}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD?Variable not set}
      POSTGRES_HOST: ${POSTGRES_HOST?Variable not set}
      POSTGRES_PORT: ${POSTGRES_PORT?Variable not set}
      CELERY_BROKER_URL: ${BROKER?Variable not set}
      CELERY_RESULT_BACKEND: ${RESULT_BACKEND?Variable not set}
    depends_on:
      redis:
        condition: service_healthy
        restart: true
      rabbitmq:
        condition: service_healthy
        restart: true
    healthcheck:
      test: ["CMD", "celery", "-A", "transactionManager", "status"]
      interval: 10s
      timeout: 5s
      retries: 3

  db:
    image: postgres:17-alpine
    restart: always
    volumes:
      - db_volume:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: ${POSTGRES_DB?Variable not set}
      POSTGRES_USER: ${POSTGRES_USER?Variable not set}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD?Variable not set}
      POSTGRES_PORT: ${POSTGRES_PORT?Variable not set}
    healthcheck:
      test: ["CMD-SHELL", "PGPASSWORD=$POSTGRES_PASSWORD pg_isready -U $POSTGRES_USER -d $POSTGRES_DB -p $POSTGRES_PORT"]
      interval: 10s
      timeout: 5s
      retries: 5


  rabbitmq:
    image: rabbitmq:4.1.2-management-alpine
    restart: always
    ports:
      - 15672:15672
    volumes:
      - rabbitmq_volume:/var/lib/rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER?Variable not set}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD?Variable not set}
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      retries: 5

  redis:
    image: redis:8.0.3-bookworm
    restart: always
    volumes:
      - redis_volume:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      retries: 5

  gateway:
    image: nginx:1.29.0-bookworm
    restart: always
    ports:
      - 80:80
      - 443:443
    volumes:
      - ./gateway/nginx.conf:/etc/nginx/conf.d/default.conf
      - static_volume:/backend/transactionManager/static
    depends_on:
      backend:
        condition: service_healthy
        restart: true
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://127.0.0.1/" ]
      interval: 5s
      timeout: 3s
      retries: 5

volumes:
  db_volume:
  logs_volume:
  media_volume:
  rabbitmq_volume:
  redis_volume:
  static_volume:
